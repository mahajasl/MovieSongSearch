// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SongDatabase;
//
//    var song = Song.FromJson(jsonString);

namespace SongDatabase
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Song
    {
        [JsonProperty("resultCount")]
        public long ResultCount { get; set; }

        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("wrapperType")]
        public string WrapperType { get; set; }

        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("artistId")]
        public long ArtistId { get; set; }

        [JsonProperty("collectionId")]
        public long CollectionId { get; set; }

        [JsonProperty("trackId")]
        public long TrackId { get; set; }

        [JsonProperty("artistName")]
        public string ArtistName { get; set; }

        [JsonProperty("collectionName")]
        public string CollectionName { get; set; }

        [JsonProperty("trackName")]
        public string TrackName { get; set; }

        [JsonProperty("collectionCensoredName")]
        public string CollectionCensoredName { get; set; }

        [JsonProperty("trackCensoredName")]
        public string TrackCensoredName { get; set; }

        [JsonProperty("artistViewUrl")]
        public Uri ArtistViewUrl { get; set; }

        [JsonProperty("collectionViewUrl")]
        public Uri CollectionViewUrl { get; set; }

        [JsonProperty("trackViewUrl")]
        public Uri TrackViewUrl { get; set; }

        [JsonProperty("previewUrl")]
        public Uri PreviewUrl { get; set; }

        [JsonProperty("artworkUrl30")]
        public Uri ArtworkUrl30 { get; set; }

        [JsonProperty("artworkUrl60")]
        public Uri ArtworkUrl60 { get; set; }

        [JsonProperty("artworkUrl100")]
        public Uri ArtworkUrl100 { get; set; }

        [JsonProperty("collectionPrice")]
        public double CollectionPrice { get; set; }

        [JsonProperty("trackPrice")]
        public double TrackPrice { get; set; }

        [JsonProperty("releaseDate")]
        public string ReleaseDate { get; set; }

        [JsonProperty("collectionExplicitness")]
        public string CollectionExplicitness { get; set; }

        [JsonProperty("trackExplicitness")]
        public string TrackExplicitness { get; set; }

        [JsonProperty("discCount")]
        public long DiscCount { get; set; }

        [JsonProperty("discNumber")]
        public long DiscNumber { get; set; }

        [JsonProperty("trackCount")]
        public long TrackCount { get; set; }

        [JsonProperty("trackNumber")]
        public long TrackNumber { get; set; }

        [JsonProperty("trackTimeMillis")]
        public long TrackTimeMillis { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("primaryGenreName")]
        public string PrimaryGenreName { get; set; }

        [JsonProperty("isStreamable")]
        public bool IsStreamable { get; set; }
    }

    public partial class Song
    {
        public static Song FromJson(string json) => JsonConvert.DeserializeObject<Song>(json, SongDatabase.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Song self) => JsonConvert.SerializeObject(self, SongDatabase.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
